// <auto-generated />
using System;
using LibrarySystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LibrarySystem.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LibrarySystem.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibrarySystem.Models.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<byte>("TypeOfEdition");

                    b.HasKey("Id");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("LibrarySystem.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfExpiry");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<bool>("IsReturned");

                    b.Property<int>("LibraryId");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TicketId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("LibrarySystem.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LibraryFundId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LibraryFundId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("LibrarySystem.Models.LibraryFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LibraryFunds");
                });

            modelBuilder.Entity("LibrarySystem.Models.LibraryWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<int?>("IssueId");

                    b.Property<string>("LastName");

                    b.Property<int>("LibraryId");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryWorkers");
                });

            modelBuilder.Entity("LibrarySystem.Models.Limit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LimitValue");

                    b.HasKey("Id");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("LibrarySystem.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NumberOfBench");

                    b.Property<int>("NumberOfHall");

                    b.Property<int>("NumberOfShelving");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("LibrarySystem.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorId");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("InStock");

                    b.Property<int>("LibraryId");

                    b.Property<int?>("LimitId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.Property<byte>("TypeOfCategory");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("LimitId");

                    b.HasIndex("LocationId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LibrarySystem.Models.Readers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LibraryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("LibrarySystem.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("ReadersId");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ticket");
                });

            modelBuilder.Entity("LibrarySystem.Models.Pensioner", b =>
                {
                    b.HasBaseType("LibrarySystem.Models.Ticket");

                    b.Property<int>("NumberOfPensionDocument");

                    b.HasIndex("ReadersId");

                    b.HasDiscriminator().HasValue("Pensioner");
                });

            modelBuilder.Entity("LibrarySystem.Models.Schoolchild", b =>
                {
                    b.HasBaseType("LibrarySystem.Models.Ticket");

                    b.Property<int>("Class");

                    b.Property<string>("School");

                    b.HasIndex("ReadersId")
                        .HasName("IX_Tickets_ReadersId1");

                    b.HasDiscriminator().HasValue("Schoolchild");
                });

            modelBuilder.Entity("LibrarySystem.Models.Scientist", b =>
                {
                    b.HasBaseType("LibrarySystem.Models.Ticket");

                    b.Property<string>("Organization");

                    b.Property<string>("Theme");

                    b.HasIndex("ReadersId")
                        .HasName("IX_Tickets_ReadersId2");

                    b.HasDiscriminator().HasValue("Scientist");
                });

            modelBuilder.Entity("LibrarySystem.Models.Student", b =>
                {
                    b.HasBaseType("LibrarySystem.Models.Ticket");

                    b.Property<int>("Course");

                    b.Property<string>("Faculty");

                    b.Property<string>("University");

                    b.HasIndex("ReadersId")
                        .HasName("IX_Tickets_ReadersId3");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("LibrarySystem.Models.Teacher", b =>
                {
                    b.HasBaseType("LibrarySystem.Models.Ticket");

                    b.Property<string>("Subject");

                    b.Property<string>("University")
                        .HasColumnName("Teacher_University");

                    b.HasIndex("ReadersId")
                        .HasName("IX_Tickets_ReadersId4");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("LibrarySystem.Models.Worker", b =>
                {
                    b.HasBaseType("LibrarySystem.Models.Ticket");

                    b.Property<string>("WorkPlace");

                    b.HasIndex("ReadersId")
                        .HasName("IX_Tickets_ReadersId5");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("LibrarySystem.Models.Issue", b =>
                {
                    b.HasOne("LibrarySystem.Models.Library", "Library")
                        .WithMany("Issues")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("LibrarySystem.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("LibrarySystem.Models.Library", b =>
                {
                    b.HasOne("LibrarySystem.Models.LibraryFund", "LibraryFund")
                        .WithMany("Libraries")
                        .HasForeignKey("LibraryFundId");
                });

            modelBuilder.Entity("LibrarySystem.Models.LibraryWorker", b =>
                {
                    b.HasOne("LibrarySystem.Models.Issue", null)
                        .WithMany("LibraryWorker")
                        .HasForeignKey("IssueId");

                    b.HasOne("LibrarySystem.Models.Library", "Library")
                        .WithMany("LibraryWorker")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrarySystem.Models.Product", b =>
                {
                    b.HasOne("LibrarySystem.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("LibrarySystem.Models.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("LibrarySystem.Models.Library", "Library")
                        .WithMany("Products")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Models.Limit", "Limit")
                        .WithMany()
                        .HasForeignKey("LimitId");

                    b.HasOne("LibrarySystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("LibrarySystem.Models.Readers", b =>
                {
                    b.HasOne("LibrarySystem.Models.Library", "Library")
                        .WithMany("Readers")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrarySystem.Models.Pensioner", b =>
                {
                    b.HasOne("LibrarySystem.Models.Readers", "Readers")
                        .WithMany("Pensioners")
                        .HasForeignKey("ReadersId");
                });

            modelBuilder.Entity("LibrarySystem.Models.Schoolchild", b =>
                {
                    b.HasOne("LibrarySystem.Models.Readers", "Readers")
                        .WithMany("Schoolchilds")
                        .HasForeignKey("ReadersId")
                        .HasConstraintName("FK_Tickets_Readers_ReadersId1");
                });

            modelBuilder.Entity("LibrarySystem.Models.Scientist", b =>
                {
                    b.HasOne("LibrarySystem.Models.Readers", "Readers")
                        .WithMany("Scientists")
                        .HasForeignKey("ReadersId")
                        .HasConstraintName("FK_Tickets_Readers_ReadersId2");
                });

            modelBuilder.Entity("LibrarySystem.Models.Student", b =>
                {
                    b.HasOne("LibrarySystem.Models.Readers", "Readers")
                        .WithMany("Students")
                        .HasForeignKey("ReadersId")
                        .HasConstraintName("FK_Tickets_Readers_ReadersId3");
                });

            modelBuilder.Entity("LibrarySystem.Models.Teacher", b =>
                {
                    b.HasOne("LibrarySystem.Models.Readers", "Readers")
                        .WithMany("Teachers")
                        .HasForeignKey("ReadersId")
                        .HasConstraintName("FK_Tickets_Readers_ReadersId4");
                });

            modelBuilder.Entity("LibrarySystem.Models.Worker", b =>
                {
                    b.HasOne("LibrarySystem.Models.Readers", "Readers")
                        .WithMany("Workers")
                        .HasForeignKey("ReadersId")
                        .HasConstraintName("FK_Tickets_Readers_ReadersId5");
                });
#pragma warning restore 612, 618
        }
    }
}
